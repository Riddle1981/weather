try{self["workbox:core:6.4.1"]&&_()}catch(e){}const logger=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(r,a){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===r&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[r](...a);const s=undefined,n=e?[]:["%cworkbox",[`background: ${t[r]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[r](...n,...a),"groupCollapsed"===r&&(e=!0),"groupEnd"===r&&(e=!1)},a={},s=Object.keys(t);for(const e of s){const t=e;a[t]=(...e)=>{r(t,e)}}return a})(),messages$1={"invalid-value":({paramName:e,validValueDescription:t,value:r})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:e,className:t,funcName:r,paramName:a})=>{if(!(e&&t&&r&&a))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${a}' passed into '${e}.${t}.${r}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&s))throw new Error("Unexpected input to 'incorrect-type' error.");const n=undefined;return`The parameter '${t}' passed into '${r}.${a?`${a}.`:""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:r,className:a,funcName:s,isReturnValueProblem:n})=>{if(!e||!r||!s)throw new Error("Unexpected input to 'incorrect-class' error.");const o=a?`${a}.`:"";return n?`The return value from '${r}.${o}${s}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${r}.${o}${s}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:r,className:a,funcName:s})=>{if(!(e&&t&&r&&a&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${a}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:r,paramName:a})=>`The supplied '${a}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${r} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:r,className:a,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${r}.${a}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${r}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:r})=>`You must define either config.statuses or config.headersin ${e}.${t}.${r}`,"invalid-string":({moduleName:e,funcName:t,paramName:r})=>{if(!r||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:r})=>`The start (${t}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let r=`The strategy could not generate a response for '${e}'.`;return t&&(r+=` The underlying error is ${t}.`),r},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`},generatorFunction=(e,t={})=>{const r=messages$1[e];if(!r)throw new Error(`Unable to find message for code '${e}'.`);return r(t)},messageGenerator=generatorFunction;class WorkboxError extends Error{constructor(e,t){const r=undefined;super(messageGenerator(e,t)),this.name=e,this.details=t}}const isArray=(e,t)=>{if(!Array.isArray(e))throw new WorkboxError("not-an-array",t)},hasMethod=(e,t,r)=>{const a=undefined;if("function"!==typeof e[t])throw r.expectedMethod=t,new WorkboxError("missing-a-method",r)},isType=(e,t,r)=>{if(typeof e!==t)throw r.expectedType=t,new WorkboxError("incorrect-type",r)},isInstance=(e,t,r)=>{if(!(e instanceof t))throw r.expectedClassName=t.name,new WorkboxError("incorrect-class",r)},isOneOf=(e,t,r)=>{if(!t.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new WorkboxError("invalid-value",r)},isArrayOfClass=(e,t,r)=>{const a=new WorkboxError("not-array-of-class",r);if(!Array.isArray(e))throw a;for(const r of e)if(!(r instanceof t))throw a},finalAssertExports={hasMethod:hasMethod,isArray:isArray,isInstance:isInstance,isOneOf:isOneOf,isType:isType,isArrayOfClass:isArrayOfClass};try{self["workbox:routing:6.4.1"]&&_()}catch(e){}const defaultMethod="GET",validMethods=["DELETE","GET","HEAD","PATCH","POST","PUT"],normalizeHandler=e=>e&&"object"==typeof e?(finalAssertExports.hasMethod(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(finalAssertExports.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class Route{constructor(e,t,r="GET"){finalAssertExports.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),r&&finalAssertExports.isOneOf(r,validMethods,{paramName:"method"}),this.handler=normalizeHandler(t),this.match=e,this.method=r}setCatchHandler(e){this.catchHandler=normalizeHandler(e)}}class RegExpRoute extends Route{constructor(e,t,r){finalAssertExports.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});const a=undefined;super((({url:t})=>{const r=e.exec(t.href);if(r){if(t.origin===location.origin||0===r.index)return r.slice(1);logger.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${t.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,r)}}const getFriendlyURL=e=>{const t=undefined;return new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),"")};class Router{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;logger.debug("Caching URLs from the window",t.urlsToCache);const r=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const r=new Request(...t);return this.handleRequest({request:r,event:e})})));e.waitUntil(r),e.ports&&e.ports[0]&&r.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){finalAssertExports.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return void logger.debug("Workbox Router only supports URLs that start with 'http'.");const a=r.origin===location.origin,{params:s,route:n}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let o=n&&n.handler;const i=[];o&&(i.push(["Found a route to handle this request:",n]),s&&i.push(["Passing the following params to the route's handler:",s]));const c=e.method;if(!o&&this._defaultHandlerMap.has(c)&&(i.push(`Failed to find a matching route. Falling back to the default handler for ${c}.`),o=this._defaultHandlerMap.get(c)),!o)return void logger.debug(`No route found for: ${getFriendlyURL(r)}`);let l;logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(r)}`),i.forEach((e=>{Array.isArray(e)?logger.log(...e):logger.log(e)})),logger.groupEnd();try{l=o.handle({url:r,request:e,event:t,params:s})}catch(e){l=Promise.reject(e)}const u=n&&n.catchHandler;return l instanceof Promise&&(this._catchHandler||u)&&(l=l.catch((async a=>{if(u){logger.groupCollapsed(`Error thrown when responding to:  ${getFriendlyURL(r)}. Falling back to route's Catch Handler.`),logger.error("Error thrown by:",n),logger.error(a),logger.groupEnd();try{return await u.handle({url:r,request:e,event:t,params:s})}catch(e){e instanceof Error&&(a=e)}}if(this._catchHandler)return logger.groupCollapsed(`Error thrown when responding to:  ${getFriendlyURL(r)}. Falling back to global Catch Handler.`),logger.error("Error thrown by:",n),logger.error(a),logger.groupEnd(),this._catchHandler.handle({url:r,request:e,event:t});throw a}))),l}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const s=this._routes.get(r.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:r,event:a});if(o)return o instanceof Promise&&logger.warn(`While routing ${getFriendlyURL(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(s)&&0===s.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,normalizeHandler(e))}setCatchHandler(e){this._catchHandler=normalizeHandler(e)}registerRoute(e){finalAssertExports.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),finalAssertExports.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),finalAssertExports.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),finalAssertExports.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),finalAssertExports.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new WorkboxError("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new WorkboxError("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let defaultRouter;const getOrCreateDefaultRouter=()=>(defaultRouter||(defaultRouter=new Router,defaultRouter.addFetchListener(),defaultRouter.addCacheListener()),defaultRouter);function registerRoute(e,t,r){let a;if("string"==typeof e){const s=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new WorkboxError("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?s.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(t)&&logger.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}const n=undefined;a=new Route((({url:t})=>(t.pathname===s.pathname&&t.origin!==s.origin&&logger.debug(`${e} only partially matches the cross-origin URL ${t.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===s.href)),t,r)}else if(e instanceof RegExp)a=new RegExpRoute(e,t,r);else if("function"==typeof e)a=new Route(e,t,r);else{if(!(e instanceof Route))throw new WorkboxError("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=e}const s=undefined;return getOrCreateDefaultRouter().registerRoute(a),a}const _cacheNameDetails={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},_createCacheName=e=>[_cacheNameDetails.prefix,e,_cacheNameDetails.suffix].filter((e=>e&&e.length>0)).join("-"),eachCacheNameDetail=e=>{for(const t of Object.keys(_cacheNameDetails))e(t)},cacheNames={updateDetails:e=>{eachCacheNameDetail((t=>{"string"==typeof e[t]&&(_cacheNameDetails[t]=e[t])}))},getGoogleAnalyticsName:e=>e||_createCacheName(_cacheNameDetails.googleAnalytics),getPrecacheName:e=>e||_createCacheName(_cacheNameDetails.precache),getPrefix:()=>_cacheNameDetails.prefix,getRuntimeName:e=>e||_createCacheName(_cacheNameDetails.runtime),getSuffix:()=>_cacheNameDetails.suffix};function dontWaitFor(e){e.then((()=>{}))}const quotaErrorCallbacks=new Set;function registerQuotaErrorCallback(e){finalAssertExports.isType(e,"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),quotaErrorCallbacks.add(e),logger.log("Registered a callback to respond to quota errors.",e)}function _extends(){return _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},_extends.apply(this,arguments)}const instanceOfAny=(e,t)=>t.some((t=>e instanceof t));let idbProxyableTypes,cursorAdvanceMethods;function getIdbProxyableTypes(){return idbProxyableTypes||(idbProxyableTypes=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function getCursorAdvanceMethods(){return cursorAdvanceMethods||(cursorAdvanceMethods=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const cursorRequestMap=new WeakMap,transactionDoneMap=new WeakMap,transactionStoreNamesMap=new WeakMap,transformCache=new WeakMap,reverseTransformCache=new WeakMap;function promisifyRequest(e){const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("success",s),e.removeEventListener("error",n)},s=()=>{t(wrap(e.result)),a()},n=()=>{r(e.error),a()};e.addEventListener("success",s),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&cursorRequestMap.set(t,e)})).catch((()=>{})),reverseTransformCache.set(t,e),t}function cacheDonePromiseForTransaction(e){if(transactionDoneMap.has(e))return;const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",n),e.removeEventListener("abort",n)},s=()=>{t(),a()},n=()=>{r(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",s),e.addEventListener("error",n),e.addEventListener("abort",n)}));transactionDoneMap.set(e,t)}let idbProxyTraps={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return transactionDoneMap.get(e);if("objectStoreNames"===t)return e.objectStoreNames||transactionStoreNamesMap.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return wrap(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function replaceTraps(e){idbProxyTraps=e(idbProxyTraps)}function wrapFunction(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?getCursorAdvanceMethods().includes(e)?function(...t){return e.apply(unwrap(this),t),wrap(cursorRequestMap.get(this))}:function(...t){return wrap(e.apply(unwrap(this),t))}:function(t,...r){const a=e.call(unwrap(this),t,...r);return transactionStoreNamesMap.set(a,t.sort?t.sort():[t]),wrap(a)}}function transformCachableValue(e){return"function"==typeof e?wrapFunction(e):(e instanceof IDBTransaction&&cacheDonePromiseForTransaction(e),instanceOfAny(e,getIdbProxyableTypes())?new Proxy(e,idbProxyTraps):e)}function wrap(e){if(e instanceof IDBRequest)return promisifyRequest(e);if(transformCache.has(e))return transformCache.get(e);const t=transformCachableValue(e);return t!==e&&(transformCache.set(e,t),reverseTransformCache.set(t,e)),t}const unwrap=e=>reverseTransformCache.get(e);function openDB(e,t,{blocked:r,upgrade:a,blocking:s,terminated:n}={}){const o=indexedDB.open(e,t),i=wrap(o);return a&&o.addEventListener("upgradeneeded",(e=>{a(wrap(o.result),e.oldVersion,e.newVersion,wrap(o.transaction))})),r&&o.addEventListener("blocked",(()=>r())),i.then((e=>{n&&e.addEventListener("close",(()=>n())),s&&e.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),i}function deleteDB(e,{blocked:t}={}){const r=indexedDB.deleteDatabase(e);return t&&r.addEventListener("blocked",(()=>t())),wrap(r).then((()=>{}))}const readMethods=["get","getKey","getAll","getAllKeys","count"],writeMethods=["put","add","delete","clear"],cachedMethods=new Map;function getMethod(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(cachedMethods.get(t))return cachedMethods.get(t);const r=t.replace(/FromIndex$/,""),a=t!==r,s=writeMethods.includes(r);if(!(r in(a?IDBIndex:IDBObjectStore).prototype)||!s&&!readMethods.includes(r))return;const n=async function(e,...t){const n=this.transaction(e,s?"readwrite":"readonly");let o=n.store;return a&&(o=o.index(t.shift())),(await Promise.all([o[r](...t),s&&n.done]))[0]};return cachedMethods.set(t,n),n}replaceTraps((e=>_extends({},e,{get:(t,r,a)=>getMethod(t,r)||e.get(t,r,a),has:(t,r)=>!!getMethod(t,r)||e.has(t,r)})));try{self["workbox:expiration:6.4.1"]&&_()}catch(e){}const DB_NAME="workbox-expiration",CACHE_OBJECT_STORE="cache-entries",normalizeURL=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class CacheTimestampsModel{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore("cache-entries",{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&deleteDB(this._cacheName)}async setTimestamp(e,t){const r={url:e=normalizeURL(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},a=undefined,s=(await this.getDb()).transaction("cache-entries","readwrite",{durability:"relaxed"});await s.store.put(r),await s.done}async getTimestamp(e){const t=await this.getDb(),r=await t.get("cache-entries",this._getId(e));return null==r?void 0:r.timestamp}async expireEntries(e,t){const r=await this.getDb();let a=await r.transaction("cache-entries").store.index("timestamp").openCursor(null,"prev");const s=[];let n=0;for(;a;){const r=a.value;r.cacheName===this._cacheName&&(e&&r.timestamp<e||t&&n>=t?s.push(a.value):n++),a=await a.continue()}const o=[];for(const e of s)await r.delete("cache-entries",e.id),o.push(e.url);return o}_getId(e){return this._cacheName+"|"+normalizeURL(e)}async getDb(){return this._db||(this._db=await openDB(DB_NAME,1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class CacheExpiration{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,finalAssertExports.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new WorkboxError("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&finalAssertExports.isType(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&finalAssertExports.isType(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new CacheTimestampsModel(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),r=await self.caches.open(this._cacheName);for(const e of t)await r.delete(e,this._matchOptions);t.length>0?(logger.groupCollapsed(`Expired ${t.length} `+(1===t.length?"entry":"entries")+" and removed "+(1===t.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),logger.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach((e=>logger.log(`    ${e}`))),logger.groupEnd()):logger.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,dontWaitFor(this.expireEntries()))}async updateTimestamp(e){finalAssertExports.isType(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),r=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<r}throw new WorkboxError("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}class ExpirationPlugin{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:r,cachedResponse:a})=>{if(!a)return null;const s=this._isResponseDateFresh(a),n=this._getCacheExpiration(r);dontWaitFor(n.expireEntries());const o=n.updateTimestamp(t.url);if(e)try{e.waitUntil(o)}catch(t){"request"in e&&logger.warn(`Unable to ensure service worker stays alive when updating cache entry for '${getFriendlyURL(e.request.url)}'.`)}return s?a:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{finalAssertExports.isType(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),finalAssertExports.isInstance(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const r=this._getCacheExpiration(e);await r.updateTimestamp(t.url),await r.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new WorkboxError("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});e.maxEntries&&finalAssertExports.isType(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&finalAssertExports.isType(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&registerQuotaErrorCallback((()=>this.deleteCacheAndMetadata()))}_getCacheExpiration(e){if(e===cacheNames.getRuntimeName())throw new WorkboxError("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new CacheExpiration(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);if(null===t)return!0;const r=undefined;return t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),r=undefined,a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}try{self["workbox:strategies:6.4.1"]&&_()}catch(e){}const cacheOkAndOpaquePlugin={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};function stripParams(e,t){const r=new URL(e);for(const e of t)r.searchParams.delete(e);return r.href}async function cacheMatchIgnoreParams(e,t,r,a){const s=stripParams(t.url,r);if(t.url===s)return e.match(t,a);const n=Object.assign(Object.assign({},a),{ignoreSearch:!0}),o=await e.keys(t,n);for(const t of o){const n=undefined;if(s===stripParams(t.url,r))return e.match(t,a)}}class Deferred{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}async function executeQuotaErrorCallbacks(){logger.log(`About to run ${quotaErrorCallbacks.size} callbacks to clean up caches.`);for(const e of quotaErrorCallbacks)await e(),logger.log(e,"is complete.");logger.log("Finished running callbacks.")}function timeout(e){return new Promise((t=>setTimeout(t,e)))}function toRequest(e){return"string"==typeof e?new Request(e):e}class StrategyHandler{constructor(e,t){this._cacheKeys={},finalAssertExports.isInstance(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new Deferred,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let r=toRequest(e);if("navigate"===r.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return logger.log(`Using a preloaded navigation response for '${getFriendlyURL(r.url)}'`),e}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:t})}catch(e){if(e instanceof Error)throw new WorkboxError("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const s=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),logger.debug(`Network request for '${getFriendlyURL(r.url)}' returned a response with status '${e.status}'.`);for(const r of this.iterateCallbacks("fetchDidSucceed"))e=await r({event:t,request:s,response:e});return e}catch(e){throw logger.log(`Network request for '${getFriendlyURL(r.url)}' threw an error.`,e),a&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:a.clone(),request:s.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const t=toRequest(e);let r;const{cacheName:a,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o=Object.assign(Object.assign({},s),{cacheName:a});r=await caches.match(n,o),r?logger.debug(`Found a cached response in '${a}'.`):logger.debug(`No cached response found in '${a}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await e({cacheName:a,matchOptions:s,cachedResponse:r,request:n,event:this.event})||void 0;return r}async cachePut(e,t){const r=toRequest(e);await timeout(0);const a=await this.getCacheKey(r,"write");{if(a.method&&"GET"!==a.method)throw new WorkboxError("attempt-to-cache-non-get-request",{url:getFriendlyURL(a.url),method:a.method});const e=t.headers.get("Vary");e&&logger.debug(`The response for ${getFriendlyURL(a.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!t)throw logger.error(`Cannot cache non-existent response for '${getFriendlyURL(a.url)}'.`),new WorkboxError("cache-put-with-no-response",{url:getFriendlyURL(a.url)});const s=await this._ensureResponseSafeToCache(t);if(!s)return logger.debug(`Response '${getFriendlyURL(a.url)}' will not be cached.`,s),!1;const{cacheName:n,matchOptions:o}=this._strategy,i=await self.caches.open(n),c=this.hasCallback("cacheDidUpdate"),l=c?await cacheMatchIgnoreParams(i,a.clone(),["__WB_REVISION__"],o):null;logger.debug(`Updating the '${n}' cache with a new Response for ${getFriendlyURL(a.url)}.`);try{await i.put(a,c?s.clone():s)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await executeQuotaErrorCallbacks(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:n,oldResponse:l,newResponse:s.clone(),request:a,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let a=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))a=toRequest(await e({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[r]=a}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const r=this._pluginStateMap.get(t),a=a=>{const s=Object.assign(Object.assign({},a),{state:r});return t[e](s)};yield a}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?logger.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):logger.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class Strategy{constructor(e={}){this.cacheName=cacheNames.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r="string"==typeof e.request?new Request(e.request):e.request,a="params"in e?e.params:void 0,s=new StrategyHandler(this,{event:t,request:r,params:a}),n=this._getResponse(s,r,t),o=undefined;return[n,this._awaitComplete(n,s,r,t)]}async _getResponse(e,t,r){let a;await e.runCallbacks("handlerWillStart",{event:r,request:t});try{if(a=await this._handle(t,e),!a||"error"===a.type)throw new WorkboxError("no-response",{url:t.url})}catch(s){if(s instanceof Error)for(const n of e.iterateCallbacks("handlerDidError"))if(a=await n({error:s,event:r,request:t}),a)break;if(!a)throw s;logger.log(`While responding to '${getFriendlyURL(t.url)}', an ${s instanceof Error?s.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const s of e.iterateCallbacks("handlerWillRespond"))a=await s({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:s}),await t.doneWaiting()}catch(e){e instanceof Error&&(n=e)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:s,error:n}),t.destroy(),n)throw n}}const messages={strategyStart:(e,t)=>`Using ${e} to respond to '${getFriendlyURL(t.url)}'`,printFinalResponse:e=>{e&&(logger.groupCollapsed("View the final response here."),logger.log(e||"[No response returned]"),logger.groupEnd())}};class StaleWhileRevalidate extends Strategy{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(cacheOkAndOpaquePlugin)}async _handle(e,t){const r=[];finalAssertExports.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const a=t.fetchAndCachePut(e).catch((()=>{}));let s=await t.cacheMatch(e),n;if(s)r.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{s=await a}catch(e){e instanceof Error&&(n=e)}}logger.groupCollapsed(messages.strategyStart(this.constructor.name,e));for(const e of r)logger.log(e);if(messages.printFinalResponse(s),logger.groupEnd(),!s)throw new WorkboxError("no-response",{url:e.url,error:n});return s}}class CacheFirst extends Strategy{async _handle(e,t){const r=[];finalAssertExports.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let a=await t.cacheMatch(e),s;if(a)r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{a=await t.fetchAndCachePut(e)}catch(e){e instanceof Error&&(s=e)}a?r.push("Got response from network."):r.push("Unable to get a response from the network.")}logger.groupCollapsed(messages.strategyStart(this.constructor.name,e));for(const e of r)logger.log(e);if(messages.printFinalResponse(a),logger.groupEnd(),!a)throw new WorkboxError("no-response",{url:e.url,error:s});return a}}class NetworkFirst extends Strategy{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(cacheOkAndOpaquePlugin),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&finalAssertExports.isType(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"constructor",paramName:"networkTimeoutSeconds"})}async _handle(e,t){const r=[];finalAssertExports.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"makeRequest"});const a=[];let s;if(this._networkTimeoutSeconds){const{id:n,promise:o}=this._getTimeoutPromise({request:e,logs:r,handler:t});s=n,a.push(o)}const n=this._getNetworkPromise({timeoutId:s,request:e,logs:r,handler:t});a.push(n);const o=await t.waitUntil((async()=>await t.waitUntil(Promise.race(a))||await n)());logger.groupCollapsed(messages.strategyStart(this.constructor.name,e));for(const e of r)logger.log(e);if(messages.printFinalResponse(o),logger.groupEnd(),!o)throw new WorkboxError("no-response",{url:e.url});return o}_getTimeoutPromise({request:e,logs:t,handler:r}){let a;const s=undefined;return{promise:new Promise((s=>{const n=undefined;a=setTimeout((async()=>{t.push(`Timing out the network response at ${this._networkTimeoutSeconds} seconds.`),s(await r.cacheMatch(e))}),1e3*this._networkTimeoutSeconds)})),id:a}}async _getNetworkPromise({timeoutId:e,request:t,logs:r,handler:a}){let s,n;try{n=await a.fetchAndCachePut(t)}catch(e){e instanceof Error&&(s=e)}return e&&clearTimeout(e),n?r.push("Got response from network."):r.push("Unable to get a response from the network. Will respond with a cached response."),!s&&n||(n=await a.cacheMatch(t),n?r.push(`Found a cached response in the '${this.cacheName}' cache.`):r.push(`No response found in the '${this.cacheName}' cache.`)),n}}function setCacheNameDetails(e){if(Object.keys(e).forEach((t=>{finalAssertExports.isType(e[t],"string",{moduleName:"workbox-core",funcName:"setCacheNameDetails",paramName:`details.${t}`})})),"precache"in e&&0===e.precache.length)throw new WorkboxError("invalid-cache-name",{cacheNameId:"precache",value:e.precache});if("runtime"in e&&0===e.runtime.length)throw new WorkboxError("invalid-cache-name",{cacheNameId:"runtime",value:e.runtime});if("googleAnalytics"in e&&0===e.googleAnalytics.length)throw new WorkboxError("invalid-cache-name",{cacheNameId:"googleAnalytics",value:e.googleAnalytics});cacheNames.updateDetails(e)}function clientsClaim(){self.addEventListener("activate",(()=>self.clients.claim()))}function waitUntil(e,t){const r=t();return e.waitUntil(r),r}try{self["workbox:precaching:6.4.1"]&&_()}catch(e){}const REVISION_SEARCH_PARAM="__WB_REVISION__";function createCacheKey(e){if(!e)throw new WorkboxError("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:t,url:r}=e;if(!r)throw new WorkboxError("add-to-cache-list-unexpected-type",{entry:e});if(!t){const e=new URL(r,location.href);return{cacheKey:e.href,url:e.href}}const a=new URL(r,location.href),s=new URL(r,location.href);return a.searchParams.set("__WB_REVISION__",t),{cacheKey:a.href,url:s.href}}class PrecacheInstallReportPlugin{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:r})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;r?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return r}}}class PrecacheCacheKeyPlugin{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const r=(null==t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return r?new Request(r,{headers:e.headers}):e},this._precacheController=e}}const logGroup=(e,t)=>{logger.groupCollapsed(e);for(const e of t)logger.log(e);logger.groupEnd()};function printCleanupDetails(e){const t=e.length;t>0&&(logger.groupCollapsed(`During precaching cleanup, ${t} cached request${1===t?" was":"s were"} deleted.`),logGroup("Deleted Cache Requests",e),logger.groupEnd())}function _nestedGroup(e,t){if(0!==t.length){logger.groupCollapsed(e);for(const e of t)logger.log(e);logger.groupEnd()}}function printInstallDetails(e,t){const r=e.length,a=t.length;if(r||a){let s=`Precaching ${r} file${1===r?"":"s"}.`;a>0&&(s+=` ${a} file${1===a?" is":"s are"} already cached.`),logger.groupCollapsed(s),_nestedGroup("View newly precached URLs.",e),_nestedGroup("View previously precached URLs.",t),logger.groupEnd()}}let supportStatus,precacheController;function canConstructResponseFromBodyStream(){if(void 0===supportStatus){const e=new Response("");if("body"in e)try{new Response(e.body),supportStatus=!0}catch(e){supportStatus=!1}supportStatus=!1}return supportStatus}async function copyResponse(e,t){let r=null;if(e.url){const t=undefined;r=new URL(e.url).origin}if(r!==self.location.origin)throw new WorkboxError("cross-origin-copy-response",{origin:r});const a=e.clone(),s={headers:new Headers(a.headers),status:a.status,statusText:a.statusText},n=t?t(s):s,o=canConstructResponseFromBodyStream()?a.body:await a.blob();return new Response(o,n)}class PrecacheStrategy extends Strategy{constructor(e={}){e.cacheName=cacheNames.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const r=await t.cacheMatch(e);return r||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let r;const a=t.params||{};if(!this._fallbackToNetwork)throw new WorkboxError("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{logger.warn(`The precached response for ${getFriendlyURL(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const s=a.integrity,n=e.integrity,o=!n||n===s;if(r=await t.fetch(new Request(e,{integrity:n||s})),s&&o){this._useDefaultCacheabilityPluginIfNeeded();const a=undefined;await t.cachePut(e,r.clone())&&logger.log(`A response for ${getFriendlyURL(e.url)} was used to "repair" the precache.`)}}{const s=a.cacheKey||await t.getCacheKey(e,"read");logger.groupCollapsed("Precaching is responding to: "+getFriendlyURL(e.url)),logger.log(`Serving the precached url: ${getFriendlyURL(s instanceof Request?s.url:s)}`),logger.groupCollapsed("View request details here."),logger.log(e),logger.groupEnd(),logger.groupCollapsed("View response details here."),logger.log(r),logger.groupEnd(),logger.groupEnd()}return r}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const r=await t.fetch(e),a=undefined;if(!await t.cachePut(e,r.clone()))throw new WorkboxError("bad-precaching-response",{url:e.url,status:r.status});return r}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[r,a]of this.plugins.entries())a!==PrecacheStrategy.copyRedirectedCacheableResponsesPlugin&&(a===PrecacheStrategy.defaultPrecacheCacheabilityPlugin&&(e=r),a.cacheWillUpdate&&t++);0===t?this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}PrecacheStrategy.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},PrecacheStrategy.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await copyResponse(e):e};class PrecacheController{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:r=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new PrecacheStrategy({cacheName:cacheNames.getPrecacheName(e),plugins:[...t,new PrecacheCacheKeyPlugin({precacheController:this})],fallbackToNetwork:r}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){finalAssertExports.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const t=[];for(const r of e){"string"==typeof r?t.push(r):r&&void 0===r.revision&&t.push(r.url);const{cacheKey:e,url:a}=createCacheKey(r),s="string"!=typeof r&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==e)throw new WorkboxError("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:e});if("string"!=typeof r&&r.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==r.integrity)throw new WorkboxError("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(e,r.integrity)}if(this._urlsToCacheKeys.set(a,e),this._urlsToCacheModes.set(a,s),t.length>0){const e=`Workbox is precaching URLs without revision info: ${t.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;logger.warn(e)}}}install(e){return waitUntil(e,(async()=>{const t=new PrecacheInstallReportPlugin;this.strategy.plugins.push(t);for(const[t,r]of this._urlsToCacheKeys){const a=this._cacheKeysToIntegrities.get(r),s=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:a,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:r},request:n,event:e}))}const{updatedURLs:r,notUpdatedURLs:a}=t;return printInstallDetails(r,a),{updatedURLs:r,notUpdatedURLs:a}}))}activate(e){return waitUntil(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),r=new Set(this._urlsToCacheKeys.values()),a=[];for(const s of t)r.has(s.url)||(await e.delete(s),a.push(s.url));return printCleanupDetails(a),{deletedURLs:a}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,r=this.getCacheKeyForURL(t);if(r){const e=undefined;return(await self.caches.open(this.strategy.cacheName)).match(r)}}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new WorkboxError("non-precached-url",{url:e});return r=>(r.request=new Request(e),r.params=Object.assign({cacheKey:t},r.params),this.strategy.handle(r))}}const getOrCreatePrecacheController=()=>(precacheController||(precacheController=new PrecacheController),precacheController);function removeIgnoredSearchParams(e,t=[]){for(const r of[...e.searchParams.keys()])t.some((e=>e.test(r)))&&e.searchParams.delete(r);return e}function*generateURLVariations(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:a=!0,urlManipulation:s}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=removeIgnoredSearchParams(n,t);if(yield o.href,r&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=r,yield e.href}if(a){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(s){const e=s({url:n});for(const t of e)yield t.href}}class PrecacheRoute extends Route{constructor(e,t){const r=undefined;super((({request:r})=>{const a=e.getURLsToCacheKeys();for(const s of generateURLVariations(r.url,t)){const t=a.get(s);if(t){const r=undefined;return{cacheKey:t,integrity:e.getIntegrityForCacheKey(t)}}}logger.debug("Precaching did not find a match for "+getFriendlyURL(r.url))}),e.strategy)}}function addRoute(e){const t=getOrCreatePrecacheController(),r=undefined;registerRoute(new PrecacheRoute(t,e))}function precache(e){const t=undefined;getOrCreatePrecacheController().precache(e)}function precacheAndRoute(e,t){precache(e),addRoute(t)}const SUBSTRING_TO_FIND="-precache-",deleteOutdatedCaches=async(e,t="-precache-")=>{const r=undefined,a=(await self.caches.keys()).filter((r=>r.includes(t)&&r.includes(self.registration.scope)&&r!==e));return await Promise.all(a.map((e=>self.caches.delete(e)))),a};function cleanupOutdatedCaches(){self.addEventListener("activate",(e=>{const t=cacheNames.getPrecacheName();e.waitUntil(deleteOutdatedCaches(t).then((e=>{e.length>0&&logger.log("The following out-of-date precaches were cleaned up automatically:",e)})))}))}class NavigationRoute extends Route{constructor(e,{allowlist:t=[/./],denylist:r=[]}={}){finalAssertExports.isArrayOfClass(t,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.allowlist"}),finalAssertExports.isArrayOfClass(r,RegExp,{moduleName:"workbox-routing",className:"NavigationRoute",funcName:"constructor",paramName:"options.denylist"}),super((e=>this._match(e)),e),this._allowlist=t,this._denylist=r}_match({url:e,request:t}){if(t&&"navigate"!==t.mode)return!1;const r=e.pathname+e.search;for(const e of this._denylist)if(e.test(r))return logger.log(`The navigation route ${r} is not being used, since the URL matches this denylist pattern: ${e.toString()}`),!1;return this._allowlist.some((e=>e.test(r)))?(logger.debug(`The navigation route ${r} is being used.`),!0):(logger.log(`The navigation route ${r} is not being used, since the URL being navigated to doesn't match the allowlist.`),!1)}}function createHandlerBoundToURL(e){const t=undefined;return getOrCreatePrecacheController().createHandlerBoundToURL(e)}setCacheNameDetails({prefix:"ice"}),self.skipWaiting(),clientsClaim(),precacheAndRoute([{url:"./404.html",revision:"249f8adaeb3b41c30983cb97fd348525"},{url:"./css/126.css",revision:"2db60a249c674fb504b2580ae3e73b2b"},{url:"./css/517.css",revision:"1499bdfa94cc165c4ec66946318115a0"},{url:"./css/index.css",revision:"f4a07585e6cc68680d3e35272a9e4dce"},{url:"./favicon.png",revision:"6ddeb44befe0c51ecf76fe1dbc98222a"},{url:"./icon/1d.png",revision:"10af7886186a985f10b53a95f11429ef"},{url:"./icon/1l.png",revision:"26f6b9e1e1f80dc6c1e06c5efc50b4cd"},{url:"./icon/2d.jpg",revision:"dab0b042b6e3bfbd3f0bc2091f55eece"},{url:"./icon/2d.png",revision:"36b76b12dc4e13be554c6b117c090313"},{url:"./icon/2l.png",revision:"c01b0f193d66f5e3ef708dbb592db44b"},{url:"./icon/3d.jpg",revision:"0dced65efd7c0b7fe277855c891c7273"},{url:"./icon/3d.png",revision:"bb3f762d2057be0bb38882a624fa3251"},{url:"./icon/3l.png",revision:"153e39ef32714096dc304c3142bc10e8"},{url:"./icon/4d.png",revision:"c474e34d5f78b489f58ef5311011f10f"},{url:"./icon/4l.jpg",revision:"acb59c5237c51af64bf4ba7220cbbde8"},{url:"./icon/4l.png",revision:"d6f780df36e99dc8b54ea5408f8c50f1"},{url:"./icon/5d.jpg",revision:"a0aabd96f18d5f066660688b41bd594a"},{url:"./icon/5d.png",revision:"06a27170473587465bbd1fb72e0e8a95"},{url:"./icon/5l.png",revision:"84f37d60de974ce947c0c8511b3c34f0"},{url:"./icon/6d.jpg",revision:"d2e0082ce80e896fcbe0689ef8689f59"},{url:"./icon/6d.png",revision:"1bff35c0429c6e2b25339fc2b4756731"},{url:"./icon/6l.jpg",revision:"c77cd73b1b178db02c8f53720c62186c"},{url:"./icon/back.png",revision:"6c586239860de7abcb195fba443b578d"},{url:"./icon/home.png",revision:"81ef26ff67f8eaac0adea065d7bb1c81"},{url:"./icon/humidity.png",revision:"ca29e7c03dfefdca9a45a3e6d00d6cc6"},{url:"./icon/jsl.png",revision:"32f03de3306efdfdcf9f47c584a4299b"},{url:"./icon/jsll.png",revision:"d5047d098e301a6cb4fe1618e41a588a"},{url:"./icon/logo.png",revision:"83737fe4e86a0864ddba478e572228e6"},{url:"./icon/wind.png",revision:"fa8a0db3b260402fa4254a989e247847"},{url:"./js/12.js",revision:"b6d5d693ad6d65cc7fdd298ed2e6a45f"},{url:"./js/126.js",revision:"b9ce48d66bde7783eae7feaa00b8ba70"},{url:"./js/517.js",revision:"17a02d710d21a50cda7518a4ad79e462"}],{}),cleanupOutdatedCaches(),registerRoute(new NavigationRoute(createHandlerBoundToURL("/index.html"))),registerRoute((function(e){var t=e.url,r;return!(self.origin===t.origin)&&[".jpg",".jpeg",".gif",".png",".svg",".ico",".webp"].some((function(e){return t.pathname.endsWith(e)}))}),new StaleWhileRevalidate({cacheName:"ice-cross-origin-images-assets",plugins:[new ExpirationPlugin({maxEntries:64,maxAgeSeconds:604800})]}),"GET"),registerRoute((function(e){var t=e.url,r;return!(self.origin===t.origin)&&[".eot",".otf",".ttc",".woff",".woff2",".font.css"].some((function(e){return t.pathname.endsWith(e)}))}),new StaleWhileRevalidate({cacheName:"ice-cross-origin-fonts-assets",plugins:[new ExpirationPlugin({maxEntries:64,maxAgeSeconds:604800})]}),"GET"),registerRoute((function(e){var t=e.url,r;return!(self.origin===t.origin)&&t.pathname.endsWith(".css")}),new StaleWhileRevalidate({cacheName:"ice-cross-origin-style-assets",plugins:[new ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),registerRoute((function(e){var t=e.url,r;return!(self.origin===t.origin)&&t.pathname.endsWith(".js")}),new StaleWhileRevalidate({cacheName:"ice-cross-origin-js-assets",plugins:[new ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,new CacheFirst({cacheName:"ice-font-assets",plugins:[new ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,new CacheFirst({cacheName:"ice-image-assets",plugins:[new ExpirationPlugin({maxEntries:64,maxAgeSeconds:604800})]}),"GET"),registerRoute(/\.(?:css)$/i,new StaleWhileRevalidate({cacheName:"ice-style-assets",plugins:[new ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),registerRoute(/\.(?:js)$/i,new StaleWhileRevalidate({cacheName:"ice-js-assets",plugins:[new ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),registerRoute(/.*/i,new NetworkFirst({cacheName:"others",networkTimeoutSeconds:10,plugins:[new ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET");